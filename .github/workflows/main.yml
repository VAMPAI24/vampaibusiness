name: CD

on:
  push:
    branches: [main, staging, develop]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BASE_URL: ${{ business-secrets.NEXT_PUBLIC_BASE_URL }}
      NEXT_PUBLIC_STAGING_URL: ${{ business-secrets.NEXT_PUBLIC_STAGING_URL }}
      # NEXT_PUBLIC_STRIPE_KEY: ${{ business-secrets.NEXT_PUBLIC_STRIPE_KEY }}
      # NEXT_PUBLIC_GEO_KEY: ${{ business-secrets.NEXT_PUBLIC_GEO_KEY }}
      NEXT_PUBLIC_MIX_PANEL: ${{ business-secrets.NEXT_PUBLIC_MIX_PANEL }}
      # NEXT_PUBLIC_PIXEL: ${{ business-secrets.NEXT_PUBLIC_PIXEL }}
      # NEXT_PUBLIC_META_TOKEN: ${{ business-secrets.NEXT_META_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.11.1
      - run: npm i --legacy-peer-deps
      - run: npm ci --legacy-peer-deps
      - run: npm run build
      - name: Cache npm and Next.js files
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
